inherit_from: .rubocop_todo.yml

# The behavior of RuboCop can be controlled via the .rubocop.yml
# configuration file. It makes it possible to enable/disable
# certain cops (checks) and to alter their behavior if they accept
# any parameters. The file can be placed either in your home
# directory or in some project directory.
#
# RuboCop will start looking for the configuration file in the directory
# where the inspected file is and continue its way up to the root directory.
#
# See https://docs.rubocop.org/rubocop/configuration

require:
  - rubocop-performance
  - rubocop-rake
  - rubocop-rspec

AllCops:
  TargetRubyVersion: 3.4
  NewCops: enable
  Exclude:
    - tmp/**/*
    - vendor/bundle/**/*
  DisplayCopNames: true

# They are idiomatic
Lint/AssignmentInCondition:
  Enabled: false

Lint/UnusedMethodArgument:
  Enabled: false

# Style

Style/Alias:
  EnforcedStyle: prefer_alias_method

Style/FrozenStringLiteralComment:
  EnforcedStyle: always

Style/MultilineBlockChain:
  Enabled: false

Style/PerlBackrefs:
  Enabled: false

Style/SingleLineBlockParams:
  Enabled: false

Style/TrivialAccessors:
  Enabled: false

# We adopted raise instead of fail.
Style/SignalException:
  EnforcedStyle: only_raise

Style/StringLiterals:
  EnforcedStyle: double_quotes

Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingUnderscoreVariable:
  Enabled: false

# `String.new` is preferred style with enabled frozen string literal
Style/EmptyLiteral:
  Enabled: false

# Layout

Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation

Layout/EndAlignment:
  EnforcedStyleAlignWith: variable
  AutoCorrect: true

Layout/DotPosition:
  EnforcedStyle: trailing

Layout/AccessModifierIndentation:
  EnforcedStyle: outdent

Layout/MultilineOperationIndentation:
  EnforcedStyle: indented

Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: false

# 1.8.7 support

Style/HashSyntax:
  EnforcedStyle: hash_rockets

Style/Lambda:
  Enabled: false

Style/EachWithObject:
  Enabled: false

Style/SpecialGlobalVars:
  Enabled: false

# Metrics

# We've chosen to use Rubocop only for style, and not for complexity or quality checks.
Metrics/ClassLength:
  Enabled: false

Metrics/ModuleLength:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Metrics/BlockNesting:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/ParameterLists:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

# It will be obvious which code is complex, Rubocop should only lint simple
# rules for us.
Metrics/PerceivedComplexity:
  Enabled: false

# This is disabled for compatibility with Ruby 3.0
Naming/BlockForwarding:
  Enabled: false

Style/ArgumentsForwarding:
  Enabled: false
